//
include "sun.asyhdr";

setView(30, -45, 10);

real p = (sqrt(5) + 1) / 2;
real q = p - 1;
real r = 1 / sqrt(3);
real x = ((p + sqrt(p - 5 / 27)) / 2) ^ (1 / 3) + ((p - sqrt(p - 5 / 27)) / 2) ^ (1 / 3);
real y = x * sqrt(209 * ((104 * p - 7) * x ^ 2 + (52 + 153 * p) * x + (195 - p))) / sqrt(3 * (x * p + 1 + p + (1 / x))) / 209;

transform3 rxy = reflect(O, X, Y);
transform3 rxz = reflect(O, X, Z);
transform3 ryz = reflect(O, Y, Z);
transform3 s = rotate(120, X + Y + Z);

triple AA = X + q * Y;
triple AB = rxz * AA;
triple AC = ryz * AA;
triple AD = rxz * AC;
triple AE = s * AA;
triple AF = rxy * AE;
triple AG = rxz * AE;
triple AH = rxy * AG;
triple AI = s * AE;
triple AJ = ryz * AI;
triple AK = rxy * AI;
triple AL = ryz * AK;

triple BA = r * (q * X + p * Y);
triple BB = ryz * BA;
triple BC = rxz * BA;
triple BD = rxz * BB;
triple BE = s * BA;
triple BF = rxz * BE;
triple BG = rxy * BF;
triple BH = rxz * BG;
triple BI = s * BE;
triple BJ = rxy * BI;
triple BK = ryz * BI;
triple BL = rxy * BK;
triple BM = r * (X + Y + Z);
triple BN = rxy * BM;
triple BO = rxz * BM;
triple BP = rxy * BO;
triple BQ = ryz * BM;
triple BR = rxy * BQ;
triple BS = rxz * BQ;
triple BT = rxy * BS;

transform3 saa = rotate(72, AA);
transform3 sab = rotate(72, AB);
transform3 sac = rotate(72, AC);
transform3 sad = rotate(72, AD);
transform3 sae = rotate(72, AE);
transform3 saf = rotate(72, AF);
transform3 sag = rotate(72, AG);
transform3 sah = rotate(72, AH);
transform3 sai = rotate(72, AI);
transform3 saj = rotate(72, AJ);
transform3 sak = rotate(72, AK);
transform3 sal = rotate(72, AL);
transform3 sbb = rotate(120, BB);
transform3 sbd = rotate(120, BD);
transform3 sbe = rotate(120, BE);
transform3 sbf = rotate(120, BF);
transform3 sbh = rotate(120, BH);
transform3 sbi = rotate(120, BI);
transform3 sbk = rotate(120, BK);
transform3 sbm = rotate(120, BM);
transform3 sbn = rotate(120, BN);
transform3 sbo = rotate(120, BO);
transform3 sbp = rotate(120, BP);

triple CA = y * unit((x ^ 2) * p * sqrt((x - 1 - (1 / x)) * p) * X + p * sqrt(x + 1 - p) * Y + sqrt((x ^ 2) * (1 + 2 * p) - p) * Z);
triple CB = sai * CA;
triple CC = sai * CB;
triple CD = sai * CC;
triple CE = sai * CD;
triple CF = sbm * CA;
triple CG = saa * CF;
triple CH = saa * CG;
triple CI = saa * CH;
triple CJ = saa * CI;
triple CK = sbe * CA;
triple CL = sae * CK;
triple CM = sae * CL;
triple CN = sae * CM;
triple CO = sae * CN;
triple CP = sbf * CA;
triple CQ = saj * CP;
triple CR = saj * CQ;
triple CS = saj * CR;
triple CT = saj * CS;
triple DA = sbo * CA;
triple DB = sag * DA;
triple DC = sag * DB;
triple DD = sag * DC;
triple DE = sag * DD;
triple DF = sbi * CA;
triple DG = sab * DF;
triple DH = sab * DG;
triple DI = sab * DH;
triple DJ = sab * DI;
triple DK = sbn * CF;
triple DL = sak * DK;
triple DM = sak * DL;
triple DN = sak * DM;
triple DO = sak * DN;
triple DP = sbb * CK;
triple DQ = saf * DP;
triple DR = saf * DQ;
triple DS = saf * DR;
triple DT = saf * DS;
triple EA = sbk * CP;
triple EB = sac * EA;
triple EC = sac * EB;
triple ED = sac * EC;
triple EE = sac * ED;
triple EF = sbd * DA;
triple EG = sad * EF;
triple EH = sad * EG;
triple EI = sad * EH;
triple EJ = sad * EI;
triple EK = sbp * DF;
triple EL = sah * EK;
triple EM = sah * EL;
triple EN = sah * EM;
triple EO = sah * EN;
triple EP = sbh * DM;
triple EQ = sal * EP;
triple ER = sal * EQ;
triple ES = sal * ER;
triple ET = sal * ES;

transform3 t = rotate(-20, CC);

bool[] conf = new bool[] {true, false, true, false, true, false, true, true, true, false, true, false};

face fca = constructFace(CA, BM, conf);
face fcb = constructFace(CB, BE, conf);
face fcc = constructFace(CC, BF, conf);
face fcd = constructFace(CD, BO, conf);
face fce = constructFace(CE, BI, conf);
face fcf = constructFace(CF, BM, conf);
face fcg = constructFace(CG, BI, conf);
face fch = constructFace(CH, BJ, conf);
face fci = constructFace(CI, BN, conf);
face fcj = constructFace(CJ, BA, conf);
face fck = constructFace(CK, BQ, conf);
face fcl = constructFace(CL, BE, conf);
face fcm = constructFace(CM, BM, conf);
face fcn = constructFace(CN, BA, conf);
face fco = constructFace(CO, BB, conf);
face fcp = constructFace(CP, BK, conf);
face fcq = constructFace(CQ, BS, conf);
face fcr = constructFace(CR, BF, conf);
face fcs = constructFace(CS, BE, conf);
face fct = constructFace(CT, BQ, conf);
face fda = constructFace(DA, BS, conf);
face fdb = constructFace(DB, BD, conf);
face fdc = constructFace(DC, BC, conf);
face fdd = constructFace(DD, BO, conf);
face fde = constructFace(DE, BF, conf);
face fdf = constructFace(DF, BO, conf);
face fdg = constructFace(DG, BC, conf);
face fdh = constructFace(DH, BP, conf);
face fdi = constructFace(DI, BJ, conf);
face fdj = constructFace(DJ, BI, conf);
face fdk = constructFace(DK, BP, conf);
face fdl = constructFace(DL, BG, conf);
face fdm = constructFace(DM, BH, conf);
face fdn = constructFace(DN, BN, conf);
face fdo = constructFace(DO, BJ, conf);
face fdp = constructFace(DP, BA, conf);
face fdq = constructFace(DQ, BN, conf);
face fdr = constructFace(DR, BH, conf);
face fds = constructFace(DS, BR, conf);
face fdt = constructFace(DT, BB, conf);
face fea = constructFace(EA, BK, conf);
face feb = constructFace(EB, BQ, conf);
face fec = constructFace(EC, BB, conf);
face fed = constructFace(ED, BR, conf);
face fee = constructFace(EE, BL, conf);
face fef = constructFace(EF, BT, conf);
face feg = constructFace(EG, BD, conf);
face feh = constructFace(EH, BS, conf);
face fei = constructFace(EI, BK, conf);
face fej = constructFace(EJ, BL, conf);
face fek = constructFace(EK, BT, conf);
face fel = constructFace(EL, BG, conf);
face fem = constructFace(EM, BP, conf);
face fen = constructFace(EN, BC, conf);
face feo = constructFace(EO, BD, conf);
face fep = constructFace(EP, BH, conf);
face feq = constructFace(EQ, BG, conf);
face fer = constructFace(ER, BT, conf);
face fes = constructFace(ES, BL, conf);
face fet = constructFace(ET, BR, conf);

real d = length(fca.P[0]-fca.R[0]) / 2;
glueFaces(fca, fcb, fcl, d);
glueFaces(fcb, fcc, fcr, d);
glueFaces(fcc, fcd, fdd, d);
glueFaces(fcd, fce, fdj, d);
glueFaces(fce, fca, fcf, d);
glueFaces(fce, fcf, fcg, d);
glueFaces(fcg, fch, fdi, d);
glueFaces(fch, fci, fdn, d);
glueFaces(fci, fcj, fdp, d);
glueFaces(fcj, fcf, fcm, d);
glueFaces(fck, fcl, fcs, d);
glueFaces(fcl, fcm, fca, d);
glueFaces(fcm, fcn, fcj, d);
glueFaces(fcn, fco, fdt, d);
glueFaces(fco, fck, feb, d);
glueFaces(fcp, fcq, feh, d);
glueFaces(fcq, fcr, fde, d);
glueFaces(fcr, fcs, fcb, d);
glueFaces(fcs, fct, fck, d);
glueFaces(fct, fcp, fea, d);
glueFaces(fda, fdb, feg, d);
glueFaces(fdb, fdc, fen, d);
glueFaces(fdc, fdd, fdf, d);
glueFaces(fdd, fde, fcc, d);
glueFaces(fde, fda, fcq, d);
glueFaces(fdf, fdg, fdc, d);
glueFaces(fdg, fdh, fem, d);
glueFaces(fdh, fdi, fdo, d);
glueFaces(fdi, fdj, fcg, d);
glueFaces(fdj, fdf, fcd, d);
glueFaces(fdk, fdl, fel, d);
glueFaces(fdl, fdm, fep, d);
glueFaces(fdm, fdn, fdq, d);
glueFaces(fdn, fdo, fch, d);
glueFaces(fdo, fdk, fdh, d);
glueFaces(fdp, fdq, fci, d);
glueFaces(fdq, fdr, fdm, d);
glueFaces(fdr, fds, fet, d);
glueFaces(fds, fdt, fec, d);
glueFaces(fdt, fdp, fcn, d);
glueFaces(fea, feb, fct, d);
glueFaces(feb, fec, fco, d);
glueFaces(fec, fed, fds, d);
glueFaces(fed, fee, fes, d);
glueFaces(fee, fea, fei, d);
glueFaces(fef, feg, feo, d);
glueFaces(feg, feh, fda, d);
glueFaces(feh, fei, fcp, d);
glueFaces(fei, fej, fee, d);
glueFaces(fej, fef, fer, d);
glueFaces(fek, fel, feq, d);
glueFaces(fel, fem, fdk, d);
glueFaces(fem, fen, fdg, d);
glueFaces(fen, feo, fdb, d);
glueFaces(feo, fek, fef, d);
glueFaces(fep, feq, fdl, d);
glueFaces(feq, fer, fek, d);
glueFaces(fer, fes, fej, d);
glueFaces(fes, fet, fed, d);
glueFaces(fet, fep, fdr, d);

vertex5 va = constructVertex5(fcf, fcg, fch, fci, fcj);
vertex5 vb = constructVertex5(fdf, fdg, fdh, fdi, fdj);
vertex5 vc = constructVertex5(fea, feb, fec, fed, fee);
vertex5 vd = constructVertex5(fef, feg, feh, fei, fej);
vertex5 ve = constructVertex5(fck, fcl, fcm, fcn, fco);
vertex5 vf = constructVertex5(fdp, fdq, fdr, fds, fdt);
vertex5 vg = constructVertex5(fda, fdb, fdc, fdd, fde);
vertex5 vh = constructVertex5(fek, fel, fem, fen, feo);
vertex5 vi = constructVertex5(fca, fcb, fcc, fcd, fce);
vertex5 vj = constructVertex5(fcp, fcq, fcr, fcs, fct);
vertex5 vk = constructVertex5(fdk, fdl, fdm, fdn, fdo);
vertex5 vl = constructVertex5(fep, feq, fer, fes, fet);

drawFace(fca, White + Platina);
drawFace(fcb, White + Lilac, t, 5);
drawFace(fcc, White + Brown, t);
drawFace(fcd, White + Ametist, t, 9);
drawFace(fce, White + Garnet);
drawFace(fcf, Red + Platina);
drawFace(fcg, Red + Lilac);
drawFace(fch, Red + Brown);
drawFace(fci, Red + Ametist);
drawFace(fcj, Red + Garnet);
drawFace(fck, Blue + Platina);
drawFace(fcl, Blue + Lilac);
drawFace(fcm, Blue + Brown);
drawFace(fcn, Blue + Ametist);
drawFace(fco, Blue + Garnet);
drawFace(fcp, Yellow + Platina);
drawFace(fcq, Yellow + Lilac);
drawFace(fcr, Yellow + Brown, t, 1);
drawFace(fcs, Yellow + Ametist);
drawFace(fct, Yellow + Garnet);
drawFace(fda, Violet + Platina);
drawFace(fdb, Violet + Lilac);
drawFace(fdc, Violet + Brown);
drawFace(fdd, Violet + Ametist, t, 3);
drawFace(fde, Violet + Garnet, t, 11);
drawFace(fdf, Green + Platina);
drawFace(fdg, Green + Lilac);
drawFace(fdh, Green + Brown);
drawFace(fdi, Green + Ametist);
drawFace(fdj, Green + Garnet);
drawFace(fdk, Lime + Platina);
drawFace(fdl, Lime + Lilac);
drawFace(fdm, Lime + Brown);
drawFace(fdn, Lime + Ametist);
drawFace(fdo, Lime + Garnet);
drawFace(fdp, Pink + Platina);
drawFace(fdq, Pink + Lilac);
drawFace(fdr, Pink + Brown);
drawFace(fds, Pink + Ametist);
drawFace(fdt, Pink + Garnet);
drawFace(fea, LightGreen + Platina);
drawFace(feb, LightGreen + Lilac);
drawFace(fec, LightGreen + Brown);
drawFace(fed, LightGreen + Ametist);
drawFace(fee, LightGreen + Garnet);
drawFace(fef, Orange + Platina);
drawFace(feg, Orange + Lilac);
drawFace(feh, Orange + Brown);
drawFace(fei, Orange + Ametist);
drawFace(fej, Orange + Garnet);
drawFace(fek, LightBlue + Platina);
drawFace(fel, LightBlue + Lilac);
drawFace(fem, LightBlue + Brown);
drawFace(fen, LightBlue + Ametist);
drawFace(feo, LightBlue + Garnet);
drawFace(fep, Grey + Platina);
drawFace(feq, Grey + Lilac);
drawFace(fer, Grey + Brown);
drawFace(fes, Grey + Ametist);
drawFace(fet, Grey + Garnet);

drawVertex5(va, Tan);
drawVertex5(vb, Tan);
drawVertex5(vc, Tan);
drawVertex5(vd, Tan);
drawVertex5(ve, Tan);
drawVertex5(vf, Tan);
drawVertex5(vg, Tan);
drawVertex5(vh, Tan);
drawVertex5(vi, Tan, t, 2);
drawVertex5(vj, Tan);
drawVertex5(vk, Tan);
drawVertex5(vl, Tan);


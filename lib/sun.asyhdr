//
include "rubiks.asyhdr";

private real computeCurvatureExtent(real k, real r, real l)
{
	real result = 0;
	if (k != 0)
	{
		real cr = k * r;
		real sl = k * l;
		result = sqrt(1 - sl * sl) - sqrt(1 - cr * cr);
		if (k < 0)
		{
			result = -result;
		}
	}
	return result;
}

private triple computeFirstIntersectionPoint(path3 left, path3 right, triple axis)
{
	triple result;
	surface s = makeSurface((shift(-axis) * right)--(shift(axis) * reverse(right)));
	triple[] allIntersections = intersectionpoints(left, s);
	if (allIntersections.length > 0)
	{
		result = allIntersections[0];
	}
	return result;
}

private bool incident(triple a, triple b, real d)
{
	return abs(xpart(a) - xpart(b)) < d && abs(ypart(a) - ypart(b)) < d && abs(zpart(a) - zpart(b)) < d;
}

struct move
{
	transform3 tr;
	int idx;
	void operator init(transform3 tr, int idx)
	{
		this.tr = tr;
		this.idx = idx;
	}
};

private transform3 matchMove(move[] mv ... int[] idx)
{
	transform3 result = identity4;
	bool found = false;
	for (int i = 0; !found && i < mv.length; ++i)
	{
		for (int j = 0; !found && j < idx.length; ++j)
		{
			if (mv[i].idx == idx[j])
			{
				result = mv[i].tr;
				found = true;
			}
		}
	}
	return result;
}

struct face
{
	triple core;
	triple center;
	triple radius;
	triple perp;
	triple[] V;
	triple[] E;
	triple[] R;
	triple[] P;
	bool[] conf;

	void operator init(triple Center, triple First, bool[] conf, real k = 0, triple Core = O)
	{
		this.core = Core;
		this.center = Center;
		if (conf[0] == false)
		{
			First = Center + (First - Center) / Cos(360 / conf.length);
		}
		this.radius = First - Center;
		real r = length(this.radius);
		this.radius /= r;
		if (k != 0 && 1 / abs(k) < r)
		{
			k = 0;
		}
		this.perp = unit(cross(Center, this.radius));
		this.conf = conf;
		int n = conf.length;
		triple[] A = new triple[n];
		A.cyclic = true;
		this.V = new triple[n];
		this.E = new triple[n];
		this.R = new triple[n];
		this.P = new triple[n];
		this.V.cyclic = true;
		this.E.cyclic = true;
		this.R.cyclic = true;
		this.P.cyclic = true;
		this.conf.cyclic = true;
		triple axis = unit(Center - Core);

		for (int i = 0; i < n; ++i)
		{
			this.V[i] = Center + r * (this.radius * Cos(i * 360 / n) + this.perp * Sin(i * 360 / n));
		}
		for(int i = 0; i < n; ++i)
		{
			this.E[i] = computeFirstIntersectionPoint(this.V[i]--this.V[i + 2], this.V[i - 1]--this.V[i + 1], axis);
		}
		for(int i = 0; i < n; ++i)
		{
			if (n < 8)
			{
				A[i] = computeFirstIntersectionPoint(this.V[i - 1]--(this.V[i - 1] + 3 * (this.V[i - 3] - this.V[i - 1])), //
					this.V[i + 1]--(this.V[i + 1] + 3 * (this.V[i + 3] - this.V[i + 1])), axis);
			}
			else if (n > 8)
			{
				A[i] = computeFirstIntersectionPoint((this.V[i - 3] + 4 * (this.V[i - 1] - this.V[i - 3]))--this.V[i - 3], //
					(this.V[i + 3] + 4 * (this.V[i + 1] - this.V[i + 3]))--this.V[i + 3], axis);
			}
		}
		for (int i = 0; i < n; ++i)
		{
			if (n == 8)
			{
				this.R[i] = computeFirstIntersectionPoint(this.E[i]--this.E[i + 3], this.E[i - 2]--this.E[i + 1], axis);
			}
			else
			{
				this.R[i] = computeFirstIntersectionPoint(A[i - 0]--(A[i - 0] + 2 * (this.E[i] - A[i - 0])), //
					A[i + 2]--(A[i + 2] + 2 * (this.E[i + 1] - A[i + 2])), axis);
			}
		}
		for (int i = 0; i < n; ++i)
		{
			if (n == 8)
			{
				this.P[i] = computeFirstIntersectionPoint(this.R[i - 2]--this.R[i], Center--this.E[i], axis);
			}
			else if (n > 8)
			{
				this.P[i] = computeFirstIntersectionPoint(arc(A[i], this.R[i - 2], this.R[i]), Center--this.E[i], axis);
			}
			else
			{
				this.P[i] = computeFirstIntersectionPoint(arc(A[i], this.R[i], this.R[i - 2]), Center--this.E[i], axis);
			}
		}
		real ee, er, ep;
		for(int i = 0; i < n; ++i)
		{
			if (k != 0 && i == 0)
			{
				ee = computeCurvatureExtent(k, r, length(this.E[i] - Center));
				er = computeCurvatureExtent(k, r, length(this.R[i] - Center));
				ep = computeCurvatureExtent(k, r, length(this.P[i] - Center));
			}
			if (ee != 0 && er != 0 && ep != 0)
			{
				/*
				this.E[i] += ee * axis;
				this.R[i] += er * axis;
				this.P[i] += ep * axis;
				*/
				this.E[i] = this.core + (ee + 1) * (this.E[i] - this.core);
				this.R[i] = this.core + (er + 1) * (this.R[i] - this.core);
				this.P[i] = this.core + (ep + 1) * (this.P[i] - this.core);
			}
		}
	}

	void drawInternal(pen color, move[] mv)
	{
		path3 center = nullpath3;
		transform3 tr = identity4;
		int tridx = -1;
		for (int i = 0; i < this.conf.length; ++i)
		{
			tr = matchMove(mv, -1, (i - 1) % this.conf.length, i, (i + 1) % this.conf.length);
			center = center--this.P[i];
			if (this.conf[i])
			{
				stick(this.E[i - 1]--this.R[i - 1]--this.E[i]--this.V[i], color, tr);
			}
			else
			{
				stick(this.E[i - 1]--this.R[i - 1]--this.E[i], color, tr);
			}
			tr = matchMove(mv, -1, i, (i + 1) % this.conf.length);
			stick(this.R[i - 1]--this.P[i]--this.R[i]--this.E[i], color, tr);
			tr = matchMove(mv, -1, i);
			stick(this.P[i - 1]--this.P[i]--this.R[i - 1], color, tr);
		}
		stick(center, color, matchMove(mv, -1));

		for (int i = 0; i < mv.length; ++i)
		{
			if (mv[i].idx != -1)
			{
				tr = mv[i].tr;
				tridx = mv[i].idx;
				triple A = rotate(120, this.core, this.V[tridx - 1]) * this.R[tridx - 2];
				triple D = rotate(-120, this.core, this.V[tridx + 1]) * this.R[tridx];
				triple B = this.R[tridx - 2]+A-this.E[tridx - 2];
				triple C = this.R[tridx]+D-this.E[tridx + 1];
				polygon(this.R[tridx - 2]--this.E[tridx - 2]--A--B, Background);
				polygon(this.R[tridx - 2]--this.E[tridx - 2]--A--B, Background, tr);
				polygon(this.R[tridx]--this.E[tridx + 1]--D--C, Background);
				polygon(this.R[tridx]--this.E[tridx + 1]--D--C, Background, tr);
				A = B;
				B = this.P[tridx - 1]+A-this.R[tridx - 2];
				D = C;
				C = this.P[tridx]+D-this.R[tridx];
				polygon(this.P[tridx - 1]--this.R[tridx - 2]--A--B, Background);
				polygon(this.P[tridx - 1]--this.R[tridx - 2]--A--B, Background, tr);
				polygon(this.P[tridx]--this.R[tridx]--D--C, Background);
				polygon(this.P[tridx]--this.R[tridx]--D--C, Background, tr);
				polygon(this.P[tridx - 1]--B--C--this.P[tridx], Background);
				polygon(this.P[tridx - 1]--B--C--this.P[tridx], Background, tr);
			}
		}
	}

	void draw(pen color ... move[] mv)
	{
		drawInternal(color, mv);
	}

	void draw(pen color, transform3 t, int tridx = -1)
	{
		if (t == identity4)
		{
			this.draw(color);
		}
		else
		{
			this.draw(color, move(t, tridx));
		}
	}
};

face constructFace(triple Center, triple First, bool[] conf, real k = 0, triple Core = O)
{
	return face(Center, First, conf, k, Core);
}

void drawFace(face f, pen color ... move[] mv)
{
	f.drawInternal(color, mv);
}

void drawFace(face f, pen color, transform3 t, int tridx = -1)
{
	f.draw(color, t, tridx);
}

real glueFaces(face a, face b, real d = 0)
{
	bool found = false;
	triple center;
	if (d == 0)
	{
		d = length(a.P[0] - a.P[1]) / 10;
	}
	for (int i = 0; !found && i < a.E.length; ++i)
	{
		for (int j = b.E.length - 1; !found && j >= 0; --j)
		{
			if (incident(a.E[i], b.E[j], d) && incident(a.E[i + 1], b.E[j - 1], d) //
				&& incident(a.V[i], b.V[j + 1], d) && incident(a.V[i + 2], b.V[j - 1], d)
			)
			{
				triple center = (a.E[i] + b.E[j])/2;
				a.E[i] = center;
				b.E[j] = center;
				center = (a.E[i + 1] + b.E[j - 1])/2;
				a.E[i + 1] = center;
				b.E[j - 1] = center;
				center = (a.V[i] + b.V[j + 1])/2;
				a.V[i] = center;
				b.V[j + 1] = center;
				center = (a.V[i + 2] + b.V[j - 1])/2;
				a.V[i + 2] = center;
				b.V[j - 1] = center;
				found = true;
			}
		}
	}
	return d;
}

real glueFaces(face a, face b, face c, real d = 0)
{
	bool found = false;
	triple center;
	if (d == 0)
	{
		d = length(a.P[0] - a.P[1]) / 10;
	}
	for (int i = 0; !found && i < a.V.length; ++i)
	{
		for (int j = 0; !found && j < b.V.length; ++j)
		{
			for (int k = 0; !found && k < c.V.length; ++k)
			{
				if (incident(a.V[i], b.V[j], d) && incident(a.V[i], c.V[k], d) && incident(b.V[j], c.V[k], d))
				{
					triple center = (a.V[i] + b.V[j] + c.V[k]) / 3;
					a.V[i] = center;
					b.V[j] = center;
					c.V[k] = center;
					found = true;
				}
			}
		}
	}
	glueFaces(a, b, d);
	glueFaces(a, c, d);
	glueFaces(b, c, d);
	return d;
}

private transform3 edgeRotation(face f, int idx) // TODO It may be useful outside
{
	return rotate(180, f.core, (f.E[idx - 1] + f.E[idx]) / 2);
}

private triple vertexRotation(face f1, int idx1, face f2, int idx2) // TODO It may be useful outside
{
	return (rotate(-120, f1.core, f1.V[idx1]) * f1.R[idx1 - 1]
		+ rotate(120, f2.core, f2.V[idx2]) * f2.R[idx2 - 1]) / 2;
}

struct vertex4
{
	triple center;
	triple[] E;
	triple[] V;
	triple[] core;

	void operator init(face a, face b, face c, face d)
	{
		this.E = new triple[4];
		this.V = new triple[4];
		this.core = new triple[4];
		this.E.cyclic = true;
		this.V.cyclic = true;
		this.core.cyclic = true;
		this.center = O;
		bool found = false;
		for (int i = 0; !found && i < a.V.length; ++i)
		{
			for (int j = 0; !found && j < b.V.length; ++j)
			{
				if (a.V[i] == b.V[j])
				{
					for (int k = 0; !found && k < c.V.length; ++k)
					{
						if (b.V[j - 1] == c.V[k])
						{
							this.V[0] = a.V[i];
							this.V[1] = b.V[j - 1];
							this.V[2] = c.V[k - 1];
							this.V[3] = a.V[i + 1];
							this.E[0] = a.E[i];
							this.E[1] = b.E[j - 1];
							this.E[2] = c.E[k - 1];
							this.center = ( // TODO Use vertexRotation(...) here
								rotate(120, a.core, this.V[3]) * a.R[i] +
								rotate(-120, a.core, this.V[0]) * a.R[i - 1] +
								rotate(120, b.core, this.V[0]) * b.R[j - 1] +
								rotate(-120, b.core, this.V[1]) * b.R[j - 2] +
								rotate(120, c.core, this.V[1]) * c.R[k - 1] +
								rotate(-120, c.core, this.V[2]) * c.R[k - 2]
							) / 8;
							found = true;
						}
					}
				}
			}
		}
		found = false;
		for (int i = 0; !found && i < d.V.length; ++i)
		{
			if (this.V[3] == d.V[i])
			{
				this.E[3] = d.E[i];
				this.center += ( // TODO Use vertexRotation(...) here
					rotate(-120, d.core, this.V[3]) * d.R[i - 1] +
					rotate(120, d.core, this.V[2]) * d.R[i]
				) / 8;
				found = true;
			}
		}
		this.core[0] = (a.core + b.core) / 2;
		this.core[1] = (b.core + c.core) / 2;
		this.core[2] = (c.core + d.core) / 2;
		this.core[3] = (d.core + a.core) / 2;
	}

	void drawInternal(pen color, move[] mv)
	{
		transform3 tr = identity4;
		int tridx = -1;
		for (int i = 0; i < this.E.length; ++i)
		{
			tr = matchMove(mv, i, (i + 1) % this.E.length);
			stick(this.center--this.E[i]--this.V[i]--this.E[i + 1], color, tr);
		}
		for (int i = 0; i < mv.length; ++i)
		{
			if (mv[i].idx != -1)
			{
				tr = mv[i].tr;
				tridx = mv[i].idx;
				triple A = rotate(-120, this.core[tridx], this.V[tridx]) * this.center;
				triple B = this.center+A-this.E[tridx + 1];
				triple C = rotate(120, this.core[tridx - 1], this.V[tridx - 1]) * this.center;
				triple D = this.center+C-this.E[tridx - 1];
				polygon(this.center--this.E[tridx + 1]--A--B, Background);
				polygon(this.center--this.E[tridx + 1]--A--B, Background, tr);
				polygon(this.center--this.E[tridx - 1]--C--D, Background);
				polygon(this.center--this.E[tridx - 1]--C--D, Background, tr);
				polygon(this.center--B--D, Background);
				polygon(this.center--B--D, Background, tr);
			}
		}
	}

	void draw(pen color ... move[] mv)
	{
		drawInternal(color, mv);
	}

	void draw(pen color, transform3 t, int tridx = -1)
	{
		if (t == identity4)
		{
			this.draw(color);
		}
		else
		{
			this.draw(color, move(t, tridx));
		}
	}
};

vertex4 constructVertex4(face a, face b, face c, face d)
{
	return vertex4(a, b, c, d);
}

void drawVertex4(vertex4 v, pen color ... move[] mv)
{
	v.drawInternal(color, mv);
}

void drawVertex4(vertex4 v, pen color, transform3 t, int tridx = -1)
{
	v.draw(color, t, tridx);
}

struct vertex5
{
	triple[] V;
	triple[] E;
	triple[] R;
	triple[] P;
	triple[] B;
	transform3[] T;

	void operator init(face a, face b, face c, face d, face e)
	{
		this.V = new triple[10];
		this.E = new triple[10];
		this.R = new triple[10];
		this.P = new triple[10];
		this.B = new triple[5];
		this.T = new transform3[10];
		this.V.cyclic = true;
		this.E.cyclic = true;
		this.R.cyclic = true;
		this.P.cyclic = true;
		this.B.cyclic = true;
		this.T.cyclic = true;
		int ai, bi, ci, di, ei;
		bool found1 = false, found2 = false;
		for (int i = 0; !found1 && i < a.V.length; ++i)
		{
			for (int j = 0; !found1 && j < b.V.length; ++j)
			{
				if (a.V[i] == b.V[j])
				{
					for (int k = 0; !found1 && k < c.V.length; ++k)
					{
						if (b.V[j - 2] == c.V[k])
						{
							ai = i + 1;
							bi = j - 1;
							ci = k - 1;
							found1 = true;
						}
					}
				}
			}
		}
		found1 = false;
		for (int i = 0; !(found1 && found2) && i < d.V.length; ++i)
		{
			if (!found1 && c.V[ci - 1] == d.V[i])
			{
				di = i - 1;
				found1 = true;
			}
			if (!found2 && a.V[ai + 1] == e.V[i])
			{
				ei = i + 1;
				found2 = true;
			}
		}
		this.V[0] = a.V[ai + 1];
		this.V[1] = a.V[ai];
		this.V[2] = b.V[bi + 1];
		this.V[3] = b.V[bi];
		this.V[4] = c.V[ci + 1];
		this.V[5] = c.V[ci];
		this.V[6] = d.V[di + 1];
		this.V[7] = d.V[di];
		this.V[8] = e.V[ei + 1];
		this.V[9] = e.V[ei];
		this.E[0] = a.E[ai];
		this.E[1] = a.E[ai - 1];
		this.E[2] = b.E[bi];
		this.E[3] = b.E[bi - 1];
		this.E[4] = c.E[ci];
		this.E[5] = c.E[ci - 1];
		this.E[6] = d.E[di];
		this.E[7] = d.E[di - 1];
		this.E[8] = e.E[ei];
		this.E[9] = e.E[ei - 1];
		transform3 ar = edgeRotation(a, ai);
		transform3 br = edgeRotation(b, bi);
		transform3 cr = edgeRotation(c, ci);
		transform3 dr = edgeRotation(d, di);
		transform3 er = edgeRotation(e, ei);
		this.R[0] = (er * e.R[ei] + ar * a.R[ai - 2]) / 2;
		this.R[1] = ar * a.R[ai - 1];
		this.R[2] = (ar * a.R[ai] + br * b.R[bi - 2]) / 2;
		this.R[3] = br * b.R[bi - 1];
		this.R[4] = (br * b.R[bi] + cr * c.R[ci - 2]) / 2;
		this.R[5] = cr * c.R[ci - 1];
		this.R[6] = (cr * c.R[ci] + dr * d.R[di - 2]) / 2;
		this.R[7] = dr * d.R[di - 1];
		this.R[8] = (dr * d.R[di] + er * e.R[ei - 2]) / 2;
		this.R[9] = er * e.R[ei - 1];
		this.P[0] = ar * a.P[ai - 1];
		this.P[1] = ar * a.P[ai];
		this.P[2] = br * b.P[bi - 1];
		this.P[3] = br * b.P[bi];
		this.P[4] = cr * c.P[ci - 1];
		this.P[5] = cr * c.P[ci];
		this.P[6] = dr * d.P[di - 1];
		this.P[7] = dr * d.P[di];
		this.P[8] = er * e.P[ei - 1];
		this.P[9] = er * e.P[ei];
		this.B[0] = rotate(-120, a.core, a.V[ai]) * a.E[ai]; // TODO Use vertexRotation(...) here
		this.B[1] = rotate(-120, b.core, b.V[bi]) * b.E[bi]; // TODO Use vertexRotation(...) here
		this.B[2] = rotate(-120, c.core, c.V[ci]) * c.E[ci]; // TODO Use vertexRotation(...) here
		this.B[3] = rotate(-120, d.core, d.V[di]) * d.E[di]; // TODO Use vertexRotation(...) here
		this.B[4] = rotate(-120, e.core, e.V[ei]) * e.E[ei]; // TODO Use vertexRotation(...) here
		this.T[0] = rotate(360 / a.V.length, a.core, a.center);
		this.T[1] = rotate(-360 / a.V.length, a.core, a.center);
		this.T[2] = rotate(360 / b.V.length, b.core, b.center);
		this.T[3] = rotate(-360 / b.V.length, b.core, b.center);
		this.T[4] = rotate(360 / c.V.length, c.core, c.center);
		this.T[5] = rotate(-360 / c.V.length, c.core, c.center);
		this.T[6] = rotate(360 / d.V.length, d.core, d.center);
		this.T[7] = rotate(-360 / d.V.length, d.core, d.center);
		this.T[8] = rotate(360 / e.V.length, e.core, e.center);
		this.T[9] = rotate(-360 / e.V.length, e.core, e.center);
	}

	void drawInternal(pen color, bool conf = true, move[] mv) // TODO Remove conf, make it uniform
	{
		transform3 tr = identity4;
		int tridx = -1;
		int idx;
		for (int i = 0; i < 10; ++i)
		{
			if (i % 2 == 0)
			{
				tr = matchMove(mv, (int) ((i - 1) % this.V.length / 2), (int) ((i + 1) % this.V.length / 2));
				stick(this.V[i]--this.E[i - 1]--this.R[i]--this.E[i], color, tr);
			}
			else if (conf)
			{
				idx = (int) (i / 2);
				tr = matchMove(mv, idx);
				stick(this.V[i]--this.E[i - 1]--this.R[i - 1]--this.B[idx], color, tr);
				stick(this.V[i]--this.E[i]--this.R[i + 1]--this.B[idx], color, tr);
				polygon(this.R[i - 1]--this.R[i + 1]--this.B[idx], Background, tr);
			}
			else
			{
				tr = matchMove(mv, (int) (i / 2));
				stick(this.E[i - 1]--this.R[i]--this.E[i], color, tr);
				stick(this.P[i - 1]--this.R[i]--this.P[i], color, tr);
			}
			if (!conf)
			{
				tr = matchMove(mv, (int) (i / 2));
				stick(this.E[i]--this.R[i]--this.P[i]--this.R[i + 1], color, tr);
			}
		}
		if (conf)
		{
			stick(this.R[0]--this.R[2]--this.R[4]--this.R[6]--this.R[8], color);
		}
		else
		{
			stick(this.R[0]--this.P[0]--this.P[1]--this.R[2]--this.P[2]--this.P[3]--this.R[4]--this.P[4] //
			--this.P[5]--this.R[6]--this.P[6]--this.P[7]--this.R[8]--this.P[8]--this.P[9], color);
		}
		for (int i = 0; i < mv.length; ++i)
		{
			tr = mv[i].tr;
			tridx = 2 * mv[i].idx + 1;
			if (tridx != -1)
			{
				triple A = this.T[tridx - 1] * this.R[tridx - 1];
				triple B = this.R[tridx - 1] + A - this.E[tridx - 2];
				triple D = this.T[tridx] * this.R[tridx + 1];
				triple C = this.R[tridx + 1] + D - this.E[tridx + 1];
				polygon(this.R[tridx - 1]--this.E[tridx - 2]--A--B, Background);
				polygon(this.R[tridx - 1]--this.E[tridx - 2]--A--B, Background, tr);
				polygon(this.R[tridx + 1]--this.E[tridx + 1]--D--C, Background);
				polygon(this.R[tridx + 1]--this.E[tridx + 1]--D--C, Background, tr);
				if (conf)
				{
					polygon(this.R[tridx - 1]--B--C--this.R[tridx + 1], Background);
					polygon(this.R[tridx - 1]--B--C--this.R[tridx + 1], Background, tr);
				}
				else
				{
					A = B;
					D = C;
					B = this.P[tridx - 1] + A - this.R[tridx - 1];
					C = this.P[tridx] + D - this.R[tridx + 1];
					polygon(this.P[tridx - 1]--this.R[tridx - 1]--A--B, Background);
					polygon(this.P[tridx - 1]--this.R[tridx - 1]--A--B, Background, tr);
					polygon(this.P[tridx]--this.R[tridx + 1]--D--C, Background);
					polygon(this.P[tridx]--this.R[tridx + 1]--D--C, Background, tr);
					polygon(this.P[tridx - 1]--B--C--this.P[tridx], Background);
					polygon(this.P[tridx - 1]--B--C--this.P[tridx], Background, tr);
				}
			}
		}
	}

	void draw(pen color, bool conf = true ... move[] mv)
	{
		drawInternal(color, conf, mv);
	}

	void draw(pen color, bool conf = true, transform3 t, int tridx = -1)
	{
		if (t == identity4)
		{
			this.draw(color);
		}
		else
		{
			this.draw(color, move(t, tridx));
		}
	}
};

vertex5 constructVertex5(face a, face b, face c, face d, face e)
{
	return vertex5(a, b, c, d, e);
}

void drawVertex5(vertex5 v, pen color, bool conf = true ... move[] mv)
{
	v.drawInternal(color, conf, mv);
}

void drawVertex5(vertex5 v, pen color, bool conf = true, transform3 t, int tridx = -1)
{
	v.draw(color, conf, t, tridx);
}

